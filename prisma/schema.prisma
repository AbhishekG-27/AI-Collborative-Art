generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DrawingType {
  FREEHAND
  ELLIPSE
  AI_ASSET
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Only allow one current room per user
  currentRoomId String?
  currentRoom   Room?   @relation(fields: [currentRoomId], references: [id])

  createdRooms Room[]       @relation("RoomCreator")
  drawings     Drawing[]
  cursors      UserCursor[]
}

model Room {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  maxUsers    Int      @default(10)
  creatorId   String
  creator     User     @relation("RoomCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // One-to-many, users can only join one room at a time
  members  User[]
  drawings Drawing[]
  cursors  UserCursor[]

  @@index([creatorId])
}

model Drawing {
  id        String      @id @default(uuid())
  roomId    String
  userId    String // Track who created this drawing
  data      Json // Store line/shape data
  type      DrawingType // freehand, shape, ai-asset
  layer     Int         @default(0)
  isVisible Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([createdAt])
}

// Track real-time cursor positions for collaboration
model UserCursor {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  x         Float
  y         Float
  color     String   @default("#ffffff")
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([roomId])
}
